import os
import shutil
import urllib
import zipfile
from distutils.dir_util import copy_tree

# Very important, get the directory that the user wants to run commands in
cwd = os.getcwd()


def create_folder(path):
    if not os.path.exists(path):
        os.makedirs(path)


def replace_folder(path):
    if os.path.exists(path):
        shutil.rmtree(path)
        os.makedirs(path)
    else:
        os.makedirs(path)


def get_html_filename(filename):
    if ".html" in filename:
        newFilename = filename
    elif ".md" in filename:
        newFilename = filename.replace(".md", ".html")
    elif ".tile" in filename:
        newFilename = filename.replace(".tile", ".html")
    elif ".jade" in filename:
        newFilename = filename.replace(".jade", ".html")
    elif ".txt" in filename:
        newFilename = filename.replace(".txt", ".html")
    elif ".rst" in filename:
        newFilename = filename.replace(".rst", ".html")
    elif ".docx" in filename:
        newFilename = filename.replace(".docx", ".html")
    else:
        print(filename + " is not a valid file type!")

    return newFilename


def get_html_clear_filename(filename):
    newFilename = filename.replace(".html", "")
    newFilename = newFilename.replace(".md", "")
    newFilename = newFilename.replace(".txt", "")
    newFilename = newFilename.replace(".tile", "")
    newFilename = newFilename.replace(".jade", "")
    newFilename = newFilename.replace(".rst", "")
    newFilename = newFilename.replace(".docx", "")
    newFilename = newFilename.replace("index", "home")
    newFilename = newFilename.replace("-", " ")
    newFilename = newFilename.replace("_", " ")
    newFilename = newFilename.title()

    return newFilename


def getunzipped(username, repo, thedir):
    theurl = "https://github.com/" + username + "/" + repo + "/archive/master.zip"
    name = os.path.join(thedir, 'temp.zip')
    try:
        name, hdrs = urllib.urlretrieve(theurl, name)
    except IOError, e:
        print "Can't retrieve %r to %r: %s" % (theurl, thedir, e)
        return
    try:
        z = zipfile.ZipFile(name)
    except zipfile.error, e:
        print "Bad zipfile (from %r): %s" % (theurl, e)
        return
    z.extractall(thedir)
    z.close()
    os.remove(name)

    copy_tree(os.path.join(thedir, repo + "-master"), thedir)
    shutil.rmtree(os.path.join(thedir, repo + "-master"))


def createConfig(app_version=5.0, wname="", wdesc="", wdescl="", wlic="", wlan="", wurl="", aname="", abio=""):
    config_file_dir = os.path.join(cwd, "config.py")
    if os.path.exists(config_file_dir):
        print("Making a backup of your config file!")
        config_file_dir2 = os.path.join(cwd, "config.py.oldbak")
        copyfile(config_file_dir, config_file_dir2)

    config_file = open(config_file_dir, "w")
    config_file.write('blended_version = ' + app_version + '\n')
    config_file.write('\n')
    config_file.write(
        '# Configuration is automatically generated by Blended (http://jmroper.com/blended), feel free to edit any values below')
    config_file.write('\n')
    config_file.write('website_name = "' + wname + '"\n')
    config_file.write('website_description = "' + wdesc + '"\n')
    config_file.write(
        'website_description_long = "' + wdescl + '"\n')
    config_file.write('website_license = "' + wlic + '"\n')
    config_file.write('website_language = "' + wlan + '"\n')
    config_file.write('website_url = "' + wurl + '"\n')
    config_file.write('\n')
    config_file.write('author_name = "' + aname + '"\n')
    config_file.write('author_bio = "' + abio + '"\n')
    config_file.write('\n')
    config_file.write('home_page_list = True\n')
    config_file.write('\n')
    config_file.write('plugins = [] # Place all needed plugins in here\n')
    config_file.write(
        'custom_variables = {} # Place all custom variables in here\n')
    config_file.write('\n')
    config_file.write('minify_css = False\n')
    config_file.write('minify_js = False\n')
    config_file.write('\n')
    config_file.write('# The following values are used for FTP uploads')
    config_file.write('\n')
    config_file.write('ftp_server = "localhost"\n')
    config_file.write('ftp_username = "user"\n')
    config_file.write('ftp_password = "pass"\n')
    config_file.write('ftp_port = 21\n')
    config_file.write('ftp_upload_path = "public_html/myWebsite"\n')
    config_file.close()

def createBlendedFolders():
    # Create the templates folder
    create_folder(os.path.join(cwd, "templates"))

    # Create the templates/assets folder
    create_folder(os.path.join(cwd, "templates", "assets"))

    # Create the templates/assets/css folder
    create_folder(os.path.join(cwd, "templates", "assets", "css"))

    # Create the templates/assets/js folder
    create_folder(os.path.join(cwd, "templates", "assets", "js"))

    # Create the templates/assets/img folder
    create_folder(os.path.join(cwd, "templates", "assets", "img"))

    # Create the content folder
    create_folder(os.path.join(cwd, "content"))
